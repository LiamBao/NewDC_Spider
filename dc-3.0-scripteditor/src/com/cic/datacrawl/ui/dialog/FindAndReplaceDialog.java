/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindAndReplacePanel.java
 *
 * Created on 2010-5-25, 11:37:03
 */

package com.cic.datacrawl.ui.dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.cic.datacrawl.ui.SwingGui;
import com.cic.datacrawl.ui.utils.SwingUtil;

/**
 * 
 * @author rex
 */
public class FindAndReplaceDialog extends javax.swing.JDialog {

	private SwingGui gui;

	/** Creates new form FindAndReplacePanel */
	public FindAndReplaceDialog(SwingGui swingGui, String title) {
		// super((JFrame) null, title);
		super(swingGui, title);
		this.gui = swingGui;
		initComponents();
		initAction();
	}

	private KeyAdapter escKeyListener = new KeyAdapter() {
		@Override
		public void keyPressed(KeyEvent ke) {
			int code = ke.getKeyCode();
			if (code == KeyEvent.VK_ESCAPE) {
				ke.consume();
				setVisible(false);
			}
		}
	};

	private void addEscKeyListener() {
		addKeyListener(escKeyListener);
		
		cmbFrom.getEditor().getEditorComponent().addKeyListener(escKeyListener);
		cmbTo.getEditor().getEditorComponent().addKeyListener(escKeyListener);
		btnRepaceAll.addKeyListener(escKeyListener);
		btnReplace.addKeyListener(escKeyListener);
		btnFindNext.addKeyListener(escKeyListener);
		btnFindPrev.addKeyListener(escKeyListener);
		btnHighlight.addKeyListener(escKeyListener);
		btnRemoveAllHighlight.addKeyListener(escKeyListener);
		btnClose.addKeyListener(escKeyListener);
		chkCaseMatch.addKeyListener(escKeyListener);
		chkRegexUsed.addKeyListener(escKeyListener);
		chkSwitchCodeUsed.addKeyListener(escKeyListener);
		chkWordOnly.addKeyListener(escKeyListener);
		chkFromTextStart.addKeyListener(escKeyListener);
		cmbFrom.addKeyListener(escKeyListener);
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		// this.setAlwaysOnTop(true);
		this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);

		setSize(512, 278);
		setResizable(false);
		java.awt.GridBagConstraints gridBagConstraints;


		lblFrom = new javax.swing.JLabel();
		lblStatusBar = new JLabel();
		lblTo = new javax.swing.JLabel();
		chkCaseMatch = new javax.swing.JCheckBox();
		chkRegexUsed = new javax.swing.JCheckBox();
		chkSwitchCodeUsed = new javax.swing.JCheckBox();
		chkFromTextStart = new javax.swing.JCheckBox();
		chkWordOnly = new javax.swing.JCheckBox();
		cmbFrom = new javax.swing.JComboBox();
		cmbTo = new javax.swing.JComboBox();
		btnFindPrev = new javax.swing.JButton();
		btnFindNext = new javax.swing.JButton();
		btnReplace = new javax.swing.JButton();
		btnRepaceAll = new javax.swing.JButton();
		btnRemoveAllHighlight = new javax.swing.JButton();
		btnHighlight = new javax.swing.JButton();
		btnClose = new javax.swing.JButton();
		centerPanel = new JPanel();
		JToolBar toolbar = new JToolBar();
		toolbar.setFloatable(false);
		toolbar.add(lblStatusBar);
		lblStatusBar.setForeground(new Color(255, 0, 0));
		lblStatusBar.setText(" ");
		getContentPane().add(toolbar, BorderLayout.SOUTH);

		getContentPane().add(centerPanel, BorderLayout.CENTER);

		setName("Form"); // NOI18N
		centerPanel.setLayout(new java.awt.GridBagLayout());

		lblFrom.setText("Find: "); // NOI18N
		lblFrom.setName("lblFrom"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new Insets(5, 10, 0, 0);
		centerPanel.add(lblFrom, gridBagConstraints);

		lblTo.setText("Replace To:"); // NOI18N
		lblTo.setName("lblTo"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new Insets(5, 10, 0, 0);
		centerPanel.add(lblTo, gridBagConstraints);

		chkCaseMatch.setText("Case sensitive"); // NOI18N
		chkCaseMatch.setName("chkCaseMatch"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
		centerPanel.add(chkCaseMatch, gridBagConstraints);

		chkRegexUsed.setText("Regular expressions "); // NOI18N
		chkRegexUsed.setName("chkRegexUsed"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
		centerPanel.add(chkRegexUsed, gridBagConstraints);

		chkSwitchCodeUsed.setText("Escape Char"); // NOI18N
		chkSwitchCodeUsed.setName("chkSwitchCodeUsed"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
		centerPanel.add(chkSwitchCodeUsed, gridBagConstraints);

		chkWordOnly.setText("Whole word"); // NOI18N
		chkWordOnly.setName("chkWordOnly"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
		centerPanel.add(chkWordOnly, gridBagConstraints);

		chkFromTextStart.setText("Warp search"); // NOI18N
		chkFromTextStart.setName("chkFromTextStart"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
		centerPanel.add(chkFromTextStart, gridBagConstraints);

		cmbFrom.setName("cmbFrom"); // NOI18N
		cmbFrom.setEditable(true);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new Insets(5, 5, 0, 0);
		centerPanel.add(cmbFrom, gridBagConstraints);

		cmbTo.setName("cmbTo"); // NOI18N
		cmbTo.setEditable(true);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new Insets(5, 5, 0, 0);
		centerPanel.add(cmbTo, gridBagConstraints);

		btnFindPrev.setText("Find Prev"); // NOI18N
		btnFindPrev.setName("btnFindPrev"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnFindPrev, gridBagConstraints);

		btnFindNext.setText("Find Next"); // NOI18N
		btnFindNext.setName("btnFindNext"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnFindNext, gridBagConstraints);

		btnReplace.setText("Replace"); // NOI18N
		btnReplace.setName("btnReplace"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnReplace, gridBagConstraints);

		btnRepaceAll.setText("Replace All"); // NOI18N
		btnRepaceAll.setName("btnRepaceAll"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnRepaceAll, gridBagConstraints);

		btnHighlight.setText("Highlight All Result"); // NOI18N
		btnHighlight.setName("btnHighlight"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnHighlight, gridBagConstraints);

		btnRemoveAllHighlight.setText("Clear All Highlight"); // NOI18N
		btnRemoveAllHighlight.setName("btnRemoveAllHighlight"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
		centerPanel.add(btnRemoveAllHighlight, gridBagConstraints);

		btnClose.setText("Close"); // NOI18N
		btnClose.setName("btnClose"); // NOI18N
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
		centerPanel.add(btnClose, gridBagConstraints);

//		KeyboardFocusManager manager = KeyboardFocusManager
//				.getCurrentKeyboardFocusManager();
//		manager.addKeyEventPostProcessor(new KeyEventPostProcessor() {
//
//			@Override
//			public boolean postProcessKeyEvent(KeyEvent ke) {				
//				if (ke.getKeyCode() == Event.ESCAPE) {
//					doClickCloseButton();				
//				} else if (ke.getKeyCode() == KeyEvent.VK_F3) {
//					if (ke.isShiftDown()) {
//						doFindPrev();
//					} else {
//						doFindNext();
//					}
//				}
//				return true;
//			}
//
//		});

		
		addComponentListener(new ComponentListener() {
			
			@Override
			public void componentShown(ComponentEvent e) {
				gui.getFindAndReplaceUtil().setWrapSearchValue(chkFromTextStart.isSelected());
			}
			
			@Override
			public void componentResized(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void componentMoved(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void componentHidden(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		addEscKeyListener();
	}// </editor-fold>//GEN-END:initComponents

	public void changeFromText(String text){
		cmbFrom.setSelectedItem(text);
	}
	
	private void initAction() {

		btnClose.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						doClickCloseButton();
					}
				});
			}
		});
		btnFindNext.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						doFindNext();
					}
				});
			}
		});
		btnFindPrev.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						doFindPrev();
					}
				});
			}
		});

		btnHighlight.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						addEditValueIntoCmbList(cmbFrom);
						gui.getFindAndReplaceUtil().highlight((String) cmbFrom.getSelectedItem());
					}
				});
			}
		});
		btnRemoveAllHighlight.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						gui.getFindAndReplaceUtil().removeAllHighlight();
					}
				});
			}
		});
		btnRepaceAll.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				lblStatusBar.setText("");
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						addEditValueIntoCmbList(cmbFrom);
						addEditValueIntoCmbList(cmbTo);
						lblStatusBar.setText(gui.getFindAndReplaceUtil().replaceAll((String) cmbFrom
								.getSelectedItem(), (String) cmbTo
								.getSelectedItem()));
					}
				});
			}
		});
		btnReplace.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				lblStatusBar.setText("");
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						addEditValueIntoCmbList(cmbFrom);
						addEditValueIntoCmbList(cmbTo);
						lblStatusBar.setText(gui.getFindAndReplaceUtil().replace((String) cmbFrom
								.getSelectedItem(), (String) cmbTo
								.getSelectedItem()));
					}
				});

			}
		});

		chkCaseMatch.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				gui.getFindAndReplaceUtil().setCaseMatchValue(chkCaseMatch.isSelected());
			}
		});

		chkFromTextStart.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				gui.getFindAndReplaceUtil().setWrapSearchValue(chkFromTextStart.isSelected());
			}
		});
		chkRegexUsed.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {

				boolean isChecked = chkRegexUsed.isSelected();
				if (isChecked) {
					chkSwitchCodeUsed.setSelected(false);
				}
				gui.getFindAndReplaceUtil().setRegexUsedValue(isChecked);
			}
		});
		chkSwitchCodeUsed.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				boolean isChecked = chkSwitchCodeUsed.isSelected();
				if (isChecked) {
					chkRegexUsed.setSelected(false);
				}
				gui.getFindAndReplaceUtil().setSwitchCodeUsedValue(isChecked);
			}
		});
		chkWordOnly.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				gui.getFindAndReplaceUtil().setWordOnlyValue(chkWordOnly.isSelected());
			}
		});

	}

	protected void doClickCloseButton() {
		doHide();
	}

	public static void main(String[] args) {
		FindAndReplaceDialog f = new FindAndReplaceDialog(null, "Hello");
		f.addNotify();
		f.doShow();
	}

	private void addEditValueIntoCmbList(JComboBox combox) {
		if (combox == null)
			return;
		synchronized (combox) {
			boolean needAdd = true;
			String currentStr = (String) combox.getSelectedItem();
			if (currentStr == null || currentStr.length() == 0)
				return;
			for (int i = 0; i < combox.getItemCount() && needAdd; ++i) {
				String itemStr = (String) combox.getItemAt(i);
				if (currentStr.equals(itemStr)) {
					needAdd = false;
				}
			}
			if (needAdd)
				combox.addItem(currentStr);
		}
	}

	private void doHide() {
		setVisible(false);
	}

	private void doFindNext() {
		doFind(false);
	}

	private void doFindPrev() {
		doFind(true);
	}

	private void doFind(boolean isPrev) {
		lblStatusBar.setText(" ");
		addEditValueIntoCmbList(cmbFrom);
		if (isPrev)
			lblStatusBar.setText(gui.getFindAndReplaceUtil().findPrev((String) cmbFrom
					.getSelectedItem()));
		else
			lblStatusBar.setText(gui.getFindAndReplaceUtil().findNext((String) cmbFrom
					.getSelectedItem()));

		addEditValueIntoCmbList(cmbFrom);
	}



	public void doShow() {
		this.addNotify();
		SwingUtil.ShowWindowAtScreenCenter(this);
		setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnClose;
	private javax.swing.JButton btnFindNext;
	private javax.swing.JButton btnFindPrev;
	private javax.swing.JButton btnRepaceAll;
	private javax.swing.JButton btnReplace;
	private javax.swing.JButton btnHighlight;
	private javax.swing.JButton btnRemoveAllHighlight;
	private javax.swing.JCheckBox chkCaseMatch;
	private javax.swing.JCheckBox chkRegexUsed;
	private javax.swing.JCheckBox chkSwitchCodeUsed;
	private javax.swing.JCheckBox chkWordOnly;
	private javax.swing.JCheckBox chkFromTextStart;
	private javax.swing.JComboBox cmbFrom;
	private javax.swing.JComboBox cmbTo;
	private javax.swing.JLabel lblFrom;
	private javax.swing.JLabel lblTo;
	private javax.swing.JLabel lblStatusBar;
	private JPanel centerPanel;
	// End of variables declaration//GEN-END:variables

}
